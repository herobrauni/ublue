name: Build Custom Image
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: "05 10 * * *" # 10:05am UTC everyday
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"
  workflow_dispatch:

env:
  IMAGE_NAME: "${{ github.event.repository.name }}" # the name of the image produced by this build, matches repo names
  IMAGE_DESC: "My Customized Universal Blue Image"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}" # do not edit
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4" # You should put your own image here so that you get a fancy profile image on https://artifacthub.io/!
  DEFAULT_TAG: latest # <-- Define the default tag here

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        # base_image:
        #   - ghcr.io/ublue-os/bluefin:stable-daily
        #   - ghcr.io/ublue-os/bluefin-dx:stable-daily
        #   - ghcr.io/ublue-os/bluefin-nvidia-open:stable-daily
        #   - ghcr.io/ublue-os/bluefin-dx-nvidia-open:stable-daily
        #   - ghcr.io/ublue-os/aurora:stable-daily
        #   - ghcr.io/ublue-os/aurora-dx:stable-daily
        #   - ghcr.io/ublue-os/aurora-nvidia-open:stable-daily
        #   - ghcr.io/ublue-os/aurora-dx-nvidia-open:stable-daily
        #   - ghcr.io/ublue-os/sericea-main:latest
        #   - ghcr.io/ublue-os/sericea-nvidia:latest
        #   - ghcr.io/ublue-os/sway-atomic-main:latest
        #   - ghcr.io/ublue-os/sway-atomic-nvidia:latest
        #   - ghcr.io/ublue-os/cosmic-atomic-main:latest
        base_image_name:
          # - bluefin
          # - bluefin-dx
          # - bluefin-nvidia-open
          # - bluefin-dx-nvidia-open
          # - aurora
          # - aurora-dx
          # - aurora-nvidia-open
          - aurora-dx-nvidia-open
          # - sericea-main
          # - sericea-nvidia
          - sway-atomic-main
          # - sway-atomic-nvidia
          - cosmic-atomic-main

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # ... (Checkout, Maximize build space, Get current date steps) ...

      - name: Image Metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        id: metadata
        with:
          # This generates all the tags for your image, you can add custom tags here too!
          # By default, it should generate "latest" and "latest.(date here)".
          tags: |
            type=raw,value=latest
            type=raw,value=latest.{{date 'YYYYMMDD'}}
            type=raw,value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          # Add base image variant to the image name in labels
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }} (${{ matrix.base_image_name }}-niri variant)
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}-${{ matrix.base_image_name }}-niri
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }} # Use DEFAULT_TAG here too
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=bootc,ublue,universal-blue,${{ matrix.base_image_name }},niri
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            io.artifacthub.package.prerelease=false
            containers.bootc=1
          # Use newline separator for labels passed to buildah/podman
          sep-labels: "\n"

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2 # Use v2.18 or later for better label handling if needed
        with:
          containerfiles: |
            ./Containerfile
          build-args: |
            BASE_IMAGE=ghcr.io/ublue-os/${{ matrix.base_image_name }}:latest
          image: ${{ env.IMAGE_NAME }}-${{ matrix.base_image_name }}-niri
          tags: ${{ steps.metadata.outputs.tags }} # Pass all generated tags
          # Pass labels correctly formatted (newline separated by default with metadata-action v5+)
          labels: ${{ steps.metadata.outputs.labels }}
          oci: false # Keep as false for buildah build

      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@f153348d8100c1f504dec435460a0d7baf11a9d2 # v1.1.1
        with:
          rechunk: 'ghcr.io/hhd-dev/rechunk:v1.0.1'
          # Use the defined DEFAULT_TAG (which is 'latest')
          ref: "localhost/${{ env.IMAGE_NAME }}-${{ matrix.base_image_name }}-niri:${{ env.DEFAULT_TAG }}"
          # Use the defined DEFAULT_TAG for the previous ref as well
          prev-ref: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.base_image_name }}-niri:${{ env.DEFAULT_TAG }}"
          skip_compression: true
          # Remove the incorrect version input
          # version: ${{ env.CENTOS_VERSION }} # <-- REMOVE THIS LINE
          # Pass labels correctly (newline separated by default)
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Load in podman and tag
        run: |
          # Pull the rechunked image using the tag specified in rechunk's output ref
          # The output ref should be localhost/image-name:latest-rechunked (or similar)
          IMAGE=$(sudo podman pull ${{ steps.rechunk.outputs.ref }})
          if [ -z "$IMAGE" ]; then
            echo "::error::Failed to pull rechunked image: ${{ steps.rechunk.outputs.ref }}"
            exit 1
          fi
          # Remove the temporary storage if it exists (optional, good practice)
          if [ -d "${{ steps.rechunk.outputs.output }}" ]; then
             sudo rm -rf ${{ steps.rechunk.outputs.output }}
          fi
          echo "Applying tags: ${{ steps.metadata.outputs.tags }}"
          for tag in ${{ steps.metadata.outputs.tags }}; do
            # Tag the pulled rechunked image ID with the final registry/image/tag combinations
            sudo podman tag $IMAGE ${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}-${{ matrix.base_image_name }}-niri:$tag
            echo "Tagged ${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}-${{ matrix.base_image_name }}-niri:$tag"
          done
          # Optional: list final images for verification
          sudo podman images | grep "${{ steps.image_case.outputs.lowercase }}-${{ matrix.base_image_name }}-niri"

      # ... (Login, Lowercase Registry/Image, Push, Cosign steps - Make sure image name in push/sign steps matches) ...

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          registry: ${{ steps.registry_case.outputs.lowercase }}
          # Ensure the image name here matches exactly what was tagged
          image: ${{ steps.image_case.outputs.lowercase }}-${{ matrix.base_image_name }}-niri
          tags: ${{ steps.metadata.outputs.tags }}
          # Use sudo for podman push as buildah likely ran as root
          # push-options: --creds=${{ env.REGISTRY_USER }}:${{ env.REGISTRY_PASSWORD }} # Alternative if username/password inputs fail

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          # Ensure the image name here matches exactly what was tagged and pushed
          IMAGE_FULL="${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}-${{ matrix.base_image_name }}-niri"
          echo "Signing tags for image: $IMAGE_FULL"
          echo "Tags: ${{ steps.metadata.outputs.tags }}"
          for tag in ${{ steps.metadata.outputs.tags }}; do
            echo "Signing $IMAGE_FULL:$tag"
            cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL:$tag
          done
        env:
          # TAGS variable isn't directly used here, loop over metadata tags
          # TAGS: ${{ steps.push.outputs.digest }} # Digest is for the manifest, not individual tags
          COSIGN_EXPERIMENTAL: "false" # Ensure it's a string if needed
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
