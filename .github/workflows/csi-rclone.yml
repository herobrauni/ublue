---
name: Build csi-rclone Image
on:
  workflow_dispatch:

env:
  DEFAULT_TAG: "latest"
  IMAGE_DESC: "csi-rclone"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}" # do not edit


jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: csi-rclone

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # These stage versions are pinned by https://github.com/renovatebot/renovate
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          repository: SwissDataScienceCenter/csi-rclone
          path: src-repo

      - name: Set current date as env variable
        run: echo "DATETAG=$(date +'%Y%m%d')" >> $GITHUB_ENV

    #   - name: Clone source repository
    #     run: |
    #       git clone https://github.com/SwissDataScienceCenter/csi-rclone.git src-repo
    #       cd src-repo
    #       echo "Cloned repository contents:"
    #       ls -la

      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3



      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # These `if` statements are so that pull requests for your custom images do not make it publish any packages under your name without you knowing
      # They also check if the runner is on the default branch so that things like the merge queue (if you enable it), are going to work
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase Image
        id: image_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_NAME }}


      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./src-repo
          platforms: linux/amd64 #,linux/arm64
        #   load: true
          tags: ghcr.io/herobrauni/csi-rclone:latest
          push: true


    #   - name: Push To GHCR
    #     uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
    #     if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    #     id: push
    #     env:
    #       REGISTRY_USER: ${{ github.actor }}
    #       REGISTRY_PASSWORD: ${{ github.token }}
    #     with:
    #       registry: ${{ steps.registry_case.outputs.lowercase }}
    #       image: ${{ steps.image_case.outputs.lowercase }}
    #       tags: herobrauni/csi-rclone:latest
    #       username: ${{ env.REGISTRY_USER }}
    #       password: ${{ env.REGISTRY_PASSWORD }}

      # This section is optional and only needs to be enabled if you plan on distributing
      # your project for others to consume. You will need to create a public and private key
      # using Cosign and save the private key as a repository secret in Github for this workflow
      # to consume. For more details, review the image signing section of the README.
      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          IMAGE_FULL="${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}"
          for tag in ${{ steps.metadata.outputs.tags }}; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL:$tag
          done
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
